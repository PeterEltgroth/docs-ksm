---
title: Preparing a Service Offering
owner: Platform Engineering (KSM Team)
---

<strong><%= modified_date %></strong>

<%= partial ("beta-notice") %>

This topic describes how to prepare an offered service for <%= vars.product_full %>.

##<a id='using'></a> Overview

<%= vars.product_short %> enables platform operators to offer Helm charts as
on-demand services to developers on <%= vars.pas_short %>.
Before you add a service offering to `cf marketplace`,
you must configure your Helm charts to be compatible with <%=  vars.product_short %>.
You can also  customize your Helm charts to enable additional features.

A service offering can have the following components:

+ **One or more Helm charts:** See [Configure Your Helm Charts](#config-helm) below.
+ **A `plans.yml` file and plan configurations:** You use these files to offer
customized plans and override default values.
See [(Optional) Define Plans Configuration](#plans) below.
+ **A `ksm.yaml` file that describes the service offering:**
See [(Optional) Offer Multiple Charts in a Single Offering](#multiple-charts) below.
The file is required if you deploy multiple charts or are use Operator patterns.
For information about Operators in Kubernetes,
see [Operator pattern](https://kubernetes.io/docs/concepts/extend-kubernetes/operator)
in the Kubernetes documentation.
+ **A binding template for environment variables:**
This template is used for app binding and service consumption.
See [(Optional) Create Binding Template for App Consumption](prepare-offer.html#env) below.

Before you deploy your service offering, you must also:

+ **Install External Dependencies:** If your Helm charts have any external dependencies,
they must be installed before you offer your service.
For example, if your Helm chart requires an Ingress Controller to enable service through ingress,
    the Ingress Controller must be manually installed onto the cluster.
+ **Load Container Images:** You might have to load your container images into a private registry.
See [(Optional) Load Container Images](#images) below.


##<a id='config-helm'></a> Configure Your Helm Charts

To configure your Helm chart to be compatible with <%= vars.product_short %>:

1. Open the `values.yaml` file at the root level of your chart.

1. Edit your `values.yaml` file to configure storage:
    + Edit the `storageClass:` value to correspond to the storageClass name for
    your configured Enterprise Pivotal Container Service (PKS)
    cluster. The default name for PKS is `standard`.
      For more information,
      see [Configuring and Using PersistentVolumes](https://docs.pivotal.io/runtimes/pks/volumes.html).

    For example:

    ```yaml
    ...
    persistence:
      enabled: true
      storageClass: "standard"
      ...
    ```

1. Edit your `values.yaml` file to enable service access.
<%= vars.product_short %> supports using a load balancer,
[Ingress](https://kubernetes.io/docs/concepts/services-networking/ingress/)
or [ExternalDNS](https://github.com/kubernetes-incubator/external-dns) to access services.
    + **If want your service to be accessed directly using a load balancer,** set
    `services.type:` to `LoadBalancer`. For example:

    ```yaml
   ...
   service:
      type: LoadBalancer
      port: 3306
   ...
   ```
    + **If want your service to accessed using Ingress or ExternalDNS:**
    Edit the value of the `hosts.name` to include a templated value for uniqueness.
    For example:

     ```yaml
    ...
    ingress:
      enabled: true
      hosts:
      - name: "{{ .Release.Name }}.example.com"
    ...
    ```
    <p class="note"><strong>Note:</strong> The Ingress controller or ExternalDNS
      controller need to be installed and configured manually.
    </p>
    For more information,
    see [(Optional) Template Values](#values-templating) below.

 <%# <!-- TODO: does this belong here or in using section--> %>

If you upload your Helm chart to <%= vars.product_short %> without adding
a `ksm.yaml` or `plans.yaml` file, your service offering is configured as follows:

* **Service Name:** The service name is the value of `name` in `Chart.yaml`.
The service name is listed under `service` when <% vars.pas_full %> app developers run `cf marketplace`.
* **Service Description:** The service description is the value of `description` in `Chart.yaml`.
The service name is listed under `description` when <% vars.pas_short %> app developers run `cf marketplace`.
* **Service Plan:** The service plan name is `default`.
The service plan name is listed under `name` when <% vars.pas_short %> app developers run `cf marketplace`. One plan is offered and the plan uses the default values for the Helm chart.

<p class="note warning"><strong>Warning:</strong> You cannot change the chart name or
   resize a PersistentVolumeClaim after you add the service offering to <%= vars.product_short %>.
 </p>

For examples of Kubernetes compatible charts,
see [kibosh-sample](https://github.com/cf-platform-eng/kibosh-sample/blob/master/sample-charts) on GitHub.

##<a id='plans'></a> (Optional) Define Plans Configuration

In `cf marketplace`, each service has a set of plans that developers can provision.
A plan is a template for service instances.
For example, different plans might represent a large or a small instance of a database.

For Kubernetes services, each <%= vars.product_short %> plan represents a set of values overriding
the Helm chart's default values.
These values are configured in `plans.yaml` at the root level of your chart.

For example charts that have been configured for <%= vars.product_short %>,
see [kibosh-sample](https://github.com/cf-platform-eng/kibosh-sample/blob/master/sample-charts) on GitHub.

If you want to override the default settings in `values.yaml` and offer custom plans:

1. Create a `plans` subdirectory at the root level of your chart

1. Create and edit `plans/PLAN-FILE.yaml` with the Helm values that you want to override.
   `PLAN-FILE.yaml` must consist of only lowercase letters, digits, `.`, or `-`.
    <br><br>
    Ensure that the properties you add to `PLAN-FILE.yaml` match the properties
    in `values.yaml` and that you only change the values.
    <br><br>
    For example:

    ```
    ---
    resources:
      requests:
        memory: 128Mi
        cpu: 100m
    ```

1. Create a `plans.yaml` file at the root level of your chart.

1. Edit your `plans.yaml` file to add your custom plan information using the following template:

    ```
    - name: PLAN-NAME
      description: PLAN-DESCRIPTION
      file: PLAN-FILE
    ```

    Where:
    * `PLAN-NAME` is the name of the plan that developers see when they run `cf marketplace`
        The plan name is listed under `plans`.
       Ensure that the plan name is lowercase only and contains no special characters.
    * `PLAN-DESCRIPTION` is the description of the plan that developers see when they run `cf marketplace`.
        The plan description is listed under `description`.
    * `PLAN-FILE` is the name of the plan file in the `plans` subdirectory.

    For example:

    ```
    - name: "small"
      description: "default (small) plan for mysql"
      file: "small.yaml"
    - name: "medium"
      description: "medium sized plan for mysql"
      file: "medium.yaml"
    ```

    When you upload a service offering to <%= vars.product_short %> with a `plans.yaml` file, each plan
    listed in the YAML file is offered with the service. <br><br>

      For example charts that have been configured for <%= vars.product_short %>, see
[kibosh-sample](https://github.com/cf-platform-eng/kibosh-sample/blob/master/sample-charts) on GitHub.


##<a id='multiple-charts'></a> (Optional) Offer Multiple Charts in a Single Offering

<%= vars.product_short %> enables you to offer multiple Helm charts in a single service offering.
You might want to offer multiple Helm charts when you have the following:

* A cluster-scoped operator or controller where the individual charts are custom resources
* A namespace scoped operator chart with another chart that represents the custom resource
* A service that uses multiple charts.
For example, a service that uses a data service chart and a monitoring service chart.

1. To offer a service with multiple Helm charts, create a `ksm.yaml` file
with a YAML descriptor using the following:

    ```yaml
    marketplace-name: my-dataservice
    charts:
      - chart: my-operator
        offered: false
        scope: cluster
      - chart: my-custom-resource
        offered: true
        scope: namespace
    ```

The `charts` dictionary is an ordered list of charts.

Consult the following table to configure a `chart` in the `charts` dictionary:

<table>
  <tr>
    <th width=13%>Key</th>
    <th width=20% >Values</th>
    <th>Description</th>
  </tr>

  <tr>
    <td><code>scope</code></td>
    <td><code>cluster</code></td>
    <td>If you use this value, the chart is only deployed once on a cluster.
    Subsequent service instances created on the same Kubernetes cluster
    do not cause a cluster scoped chart to be deployed additional times.
    This scope is useful for operators and controllers that manage multiple
    instances from a single deployment.</td>
  </tr>

  <tr>
    <td></td>
    <td><code>namespace</code></td>
    <td>If you use this value, the chart is deployed on the cluster every time
      the service is created.</td<
  </tr>

  <tr>
    <td><code>offered</code></td>
    <td><code>true</code> | <code>false</code></td>
    <td>Only a single chart can have be <code>offered</code> set to <code>true</code>.
      The chart that is set to <code>true</code> must also have
      <code>scope</code> set to <code>namespace</code>.
      The offered chart conceptually represents the service the user would like to bind to.
      However, you can expose more resources with <code>cf bind-service</code>.</td>

  </tr>

</table>

<br><br>
When you upload a service offering to <%= vars.product_short %> with a `ksm.yaml` file,
the service name is the value of `marketplace-name`.
The service name is listed under `service` when <% vars.pas_full %> app developers run `cf marketplace`.

##<a id='env'></a> (Optional) Create Binding Template for App Consumption

Apps running in <% vars.pas_short %>  gain access to bound service instances through an environment
variable credentials hash called `VCAP_SERVICES`. Libraries, like Spring Cloud
Cloud Foundry Connector,
automatically support services if their credentials in `VCAP_SERVICES` are formatted
in a valid JSON object.

For an example of the requirements for using Spring Cloud
Cloud Foundry Connector with a MySQL service, see
[MySQL](https://cloud.spring.io/spring-cloud-connectors/spring-cloud-cloud-foundry-connector.html#_mysql)
in the Spring Cloud Cloud Foundry Connector documentation.

Chart authors can create a `bind.yaml` file to enable the broker to
return a valid JSON object containing service credentials. This `bind.yaml` file is added
to the root directory of the chart and contains a Jsonnet template.
When a developer binds the service instance to their app,
service credentials are delivered to `VCAP_SERVICES` for app consumption.

For information about Jsonnet templates, see [Jsonnet](https://jsonnet.org).

To create and test a `bind.yaml` file:

1. Add a `bind.yaml` file to the root directory of your chart.
    For example, the following `bind.yaml` enables the broker to return
    MySQL credentials in a valid JSON obejct:

    ```yaml
    template: |
      {
        hostname: $.services[0].status.loadBalancer.ingress[0].ip,
        name: $.services[0].name,
        jdbcUrl: "jdbc:mysql://" + self.hostname + "/my_db?user=" + self.username + "&password=" + self.password + "&useSSL=false",
        uri: "mysql://" + self.username + ":" + self.password + "@" + self.hostname + ":" + self.port + "/my_db?reconnect=true",
        password: $.secrets[0].data['mysql-root-password'],
        port: 3306,
        username: "root"
      }
    ```
    <p class="note"><strong>Note:</strong> The values of <code>$.services</code>
      and <code>$.secrets</code> come from the namespace in which the chart is deployed.
      </p>

1. Download the `template-tester` binary from
[kibosh](https://github.com/cf-platform-eng/kibosh/releases/latest) in GitHub.

1. Test that `bind.yaml` is creating a valid JSON object by running the following command:

    ```
    template-tester NAMESPACE bind.yaml
    ```

    Where `NAMESPACE` is the name of the namespace in your cluster where
    your chart is deployed.

    For example:
    <pre class="terminal">$ template-tester default bind.yaml
      {
       "hostname": "192.168.1.1",
       "jdbcUrl": "jdbc&#58;mysql&#58;//192.168.1.1/my&#95;db?user=root&password=ab1cdeFgH3IJKLMN&useSSL=false",
       "name": "kibosh-46588108-0 ba5-4 7c0-ba97-bd76e33af0d1-grafana",
       "password": "ab1cdeFgH3IJKLMN",
       "port": 3306,
       "uri": "mysql&#58;//root&#58;ab1cdeFgH3IJKLMN@192&#46;168&#46;1&#46;1&#58;3306/my&#95;db?reconnect=true",
       "username": "root"
      }</pre>


###<a id='values-templating'></a> (Optional) Template Values

<%# The below distinction is not very clear to me.
For instance what is meant by "the values themselves"? The values in `values.yaml`?
Also: what is the `templating engine`?%>

Helm uses `values.yaml` as a the concrete set of substitutions needed to create a release.
<%= vars.product_short %> uses the values themselves as a template for multiple releases.
This difference can create situations where `values.yaml` needs to go through the templating engine.

`values.yaml` might need to go through the templating engine in the following situations:

* When the chart uses Ingress Controller (hosts)
* When there is a unique name, in addition to the release name, required in the chart

<%= vars.product_short %> runs the _values_ themselves through the templating engine.
For example, in a chart with ingress hosts, you could use the release name as the unique
subdomain discriminator in the ingress definition:

```yaml
...
ingress:
  enabled: true
  hosts:
  - name: "{{ .Release.Name }}.example.com"
...
```

The plan-specific values files also go through the templating engine.

##<a id='images'></a> (Optional) Load Container Images

You must load container images into a private registry if either of the following applies:

+ Your environment is air-gapped and cannot connect to common registries such as
[Docker Hub](https://hub.docker.com/) and
[Quay](https://quay.io/).
+ The images referenced in the Helm chart are not public.

You must load the images before a developer runs `cf create-service`.
To load your container images follow instructions for your specific registry.
For example, if you are using Harbor, follow the instructions in [Pulling and pushing images using Docker client](https://github.com/goharbor/harbor/blob/master/docs/user_guide.md#pulling-and-pushing-images-using-docker-client) on GitHub.

Note: Our assumption is that helm chart uses "image" or "images" key to specify the value of repository, if helm chart uses some other keys <%= vars.product_short %> won't be able to do image transformation to private registry.
Below is an example of the supported structures

* A single-image chart's values:

    ```yaml
    ---
    image: "my-image"
    imageTag: "5.7.14"
    ```

* A multi-image chart's values:

    ```yaml
    ---
    images:
      component1:
        image: "my-first-image"
        imageTag: "5.7.14"
      component2:
        image: "my-second-image"
        imageTag: "1.2.3"
    ```
