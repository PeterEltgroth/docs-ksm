---
title: Using Pivotal Bazaar for PCF
owner: Partners
---

<strong><%= modified_date %></strong>

This topic describes how to use Pivotal Bazaar for PCF.

##<a id='using'></a> Using Pivotal Bazaar for PCF

###<a id='using'></a> Downloading Services

The Bazaar command line interface (cli) can download PKS integrations off of Pivotal Network.

To list available integrations, run:

```bash
bazaar chart pivnet-list -a (pivnet-token)
```

To download an integration into a local directory `./tmp`, run

```bash
bazaar chart download -a (pivnet token) -p (product) -d (./tmp)
```

This downloads a release's files from Pivotal Network, including the [Helm](https://helm.sh/) chart,
the docker images, and any additional files for the release.

To see all available flags (for example, `-r` to choose a specific version), run

###<a id='shared'></a> Shared instances and Add-ons

```bash
bazaar chart install --help
```
This will install helm chart to provide a shared instance service on a PKS cluster.

Keep in mind that some integrations may require additional setup, so be sure to read the documentation
to validate compatibility and prerequisites.

Before running `bazaar`'s install, download and install the
[PKS CLI](https://docs.pivotal.io/runtimes/pks/cli/index.html). You also need to the login
PKS cluster where you want to install services. See the
[PKS documentation](https://docs.pivotal.io/runtimes/pks/index.html) for additional information.

```bash
pks login -a (pks uaa host) -u (username) -p (password)
```

Now the integration that was previously downloaded into `./tmp` can be installed with

```bash
bazaar chart install -d ./tmp -c (cluster name) -n (name of installation) -f (values yaml file)
```

Each service will likely need some service specific configuration, which is specified by the
values yaml file. On a successful install run, Bazaar will output information about the service
(how to get credentials, etc).


###<a id='dedicated'></a> Dedicated instances
Dedicated instances are provided through a broker installed via the Bazaar tile. When a
[Pivotal Application Service](https://pivotal.io/platform/pivotal-application-service)
developer uses `cf create-service`, the broker creates a dedicated instance of
the service in the backing cluster.

In the Cloud Foundry marketplace, each service has a set of plans that developers can provision. A plan is the template
for the service instances. For example, different plans might represent a large or a small instance
of a database.

For Kubernetes based services, each plan represents a set of values overriding the helm charts default values.
These values are described by an additional file, `plans.yaml` at root level of the chart

```yaml
- name: "small"
  description: "default (small) plan for mysql"
  file: "small.yaml"
- name: "medium"
  description: "medium sized plan for mysql"
  file: "medium.yaml"
```

* `file` is a filename that exists in the `plans` subdirectory of the chart.
   File names should consist of only lowercase letters, digits, `.`, or `-`.
   The standard `values.yaml` file in the helm chart sets the defaults.
   Each plan's yaml file is a set of values overriding the defaults present in `values.yaml`.
   Copy any key/value pairs to override from `values.yaml` into a new plan file and change their value.
* `description` describes the plan and is shown to developers in the marketplace.
* `name` is the name of the plan, typed by developers when provision (choose a cli-friendly value: lower only, no special characters).

For additional examples, see
[https://github.com/cf-platform-eng/kibosh-sample/sample-charts](https://github.com/cf-platform-eng/kibosh-sample/blob/master/sample-charts)

####<a id='updatetar'></a> Define Plans
To add plans to charts get your previously downloaded product tgz file form (./tmp)

```bash
cd ./tmp
tar -xvf your-product.tgz
```
Add plans.yaml, for example

```bash
cat > plans.yaml
- name: "small"
  description: "default (small) plan for mysql"
  file: "small.yaml"
- name: "medium"
  description: "medium sized plan for mysql"
  file: "medium.yaml"
```
Define one or more plans with set of override values in (your plan).yaml for example

```bash
mkdir plans
cd plans
cat > small.yaml
resources:
  requests:
    memory: 128Mi
    cpu: 100m
```

Re-package your helm chart

```bash
helm package (your product)
```

To add service offering to bazaar that can then be used by the developer to provision from cf marketplace

```bash
bazaar -t (bazaar api url) -u (username) -p (password) offer save ./tmp/(your product).tgz
```

To list existing service offerings available in bazaar

```bash
bazaar -t (bazaar api url) -u (username) -p (password) offer list ./tmp/(your product).tgz
```

To delete any service offerings from bazaar

```bash
bazaar -t (bazaar api url) -u (username) -p (password) offer delete ./tmp/(your product).tgz
```

For air-gapped environments that cannot reach out to common registries such as
[Docker Hub](https://hub.docker.com/) and
[Quay](https://quay.io/), or for images that aren't public, Bazaar's `download` command will also
get the container images off of Pivotal Network. These images need to be loaded into a private registry. The `docker`
cli [can add images](https://docs.docker.com/engine/reference/commandline/load/). The Bazaar cli does, however,
include a command that can handle many use cases. To load an image into a private registry, run

```bash
docker login -u (username) -p (password) (private registry url)
bazaar image push -r (private registry url ) -d (directory with private images)
```

managing images in private registry

Adapting open source chart
Ingress
storage


##<a id='troubleshooting'></a> Troubleshooting
service doesn't come healthy
service command purge

kibosh tiller


<span style="color: deeppink; font-weight: bold">TODO</a>
