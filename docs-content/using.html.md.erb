---
title: Using Kubernetes Service Manager for PCF
owner: ISM
---

<strong><%= modified_date %></strong>

<%= partial ("beta-notice") %>

This topic describes how to use Kubernetes Service Manager for PCF.

##<a id='using'></a> Using Kubernetes Service Manager for PCF

Use Kubernetes Service Manager for PCF

Kubernetes Service Manager for PCF uses both the `bazaar` CLI and a generic broker.

###<a id='shared-add-on'></a> Use with Shared Instances and Add-ons
Shared instances and add-ons are installed directly into a PKS cluster.

To install a helm chart for a shared instance or add-on, do the following:

1. To log in to the PKS cluster, run the following command:

    ``` 
    pks login -a PKS-API -u USERNAME -p PASSWORD
    ```

    Where:
    + `PKS-API` is the domain name for the PKS API that you entered in **Ops Manager > Pivotal Container Service > PKS API > API Hostname (FQDN)**. For example: `api.pks.example.com`.
    + `USERNAME` is the username you created in [Grant PKS Access to a User](https://docs.pivotal.io/runtimes/pks/manage-users.html#uaa-user).
    + `PASSWORD` is the password you created in  [Grant PKS Access to a User](https://docs.pivotal.io/runtimes/pks/manage-users.html#uaa-user). If you do not provide a password, the CLI prompts for the password interactively. Pivotal recommends running the login command without the `-p` flag for added security.
      
      [DOES THIS MEAN THAT PKS SHOULD BE EXPLICITLY STATED AS A REQUIREMENT?]

1. To install a helm chart for a shared instance service on a PKS cluster, run the following command:

    ```
    bazaar chart install -d ./tmp -c CLUSTER-NAME -n INSTALLATION-NAME -f YAML-FILE
    ```
    
    Where:
    + `CLUSTER-NAME` is 
    + `INSTALLATION-NAME` is
    + `YAML-FILE` is

    Keep in mind that some integrations might require additional setup, so be sure to read the documentation to validate compatibility and prerequisite>s.
    Each service most likely needs some service specific configuration, which is specified by the values YAML file.
    
    [WHERE DO THEY GET THESE VALUES. EXAMPLE YAML FILE. WHAT IS MEANT BY INSTALLATION NAME]
    
     On a successful install run, Kubernetes Service Manager for PCF outputs information about the service
    (how to get credentials, etc).
    
    [EXAMPLE OUTPUT]

    [WHAT DOCUMENTATION? WHEN DID WE DOWNLOAD THE INTERGRATION TO ./tmp? DO YOU MEAN THE PIVNET TILE?]

## <a id='dedicated'></a> Use with Dedicated Service Instances
Dedicated instances are provided through a broker installed through the Kubernetes Service Manager for PCF tile. When a Pivotal Application Service (PAS)
developer run `cf create-service`, the broker creates a dedicated service instance of
the service in the backing cluster.

In the Marketplace each service has a set of plans that developers can provision. A plan is the template for the service instances. For example, different plans might represent a large or a small instance of a database.

For Kubernetes based services, each plan represents a set of values overriding the helm chart's default values.
These values are described by `plans.yaml` at the root level of the chart.

For example: 

```
- name: "small"
  description: "default (small) plan for mysql"
  file: "small.yaml"
- name: "medium"
  description: "medium sized plan for mysql"
  file: "medium.yaml"
```

* `file` is a filename that exists in the `plans` subdirectory of the chart.
   File names must consist of only lowercase letters, digits, `.`, or `-`.
   The standard `values.yaml` file in the helm chart sets the defaults.
   Each plan's YAML file is a set of values overriding the defaults present in `values.yaml`.
   Copy any key/value pairs to override from `values.yaml` into a new plan file and change their value.
* `description` describes the plan and is shown to developers in the Marketplace.
* `name` is the name of the plan, typed by developers when provisioning (choose a CLI-friendly value: lowercase only, no special characters).

File names must  consist of only lowercase letters, digits, `.`, or `-`.
The `plan.yml` file overrides the defaults in `values.yaml`. If you want to overide
Copy any key-value pairs to override from `values.yaml` into a new plan file and change their value.

For additional examples, see
[https://github.com/cf-platform-eng/kibosh-sample/sample-charts](https://github.com/cf-platform-eng/kibosh-sample/blob/master/sample-charts)

###<a id='plans'></a> Define Plans

[ASSUME THE READER KNOW HOW TO MAKE A DIRECTOR AND ADD FILES, JUST TELL THEM WHAT TO MAKE IN THE BEGINING AND THEN DO THE INTALL STUFF. REDO THE FOLLOWING SECTION]


1. To open your TGZ file at `./tmp`, run the following commands:

    ```
    cd ./tmp
    tar -xvf your-product.tgz
    ```
1. Create and edit one or more plans with override values, using the following as a template: 

    ```
    mkdir plans
    cd plans
    cat > small.yaml
    resources:
      requests:
        memory: 128Mi
        cpu: 100m
    ```

  
1. Create and edit your `plans.yaml` file, using the following as a template:

    ```
    - name: PLAN-NAME
      description: PLAN-DESCRIPTION
      file: PLAN-FILE
    ```
    
    Where:
    * `PLAN-NAME` is the name of the plan that developers see when provisioning 
    * `PLAN-DESCRIPTION` is tdescribes the plan and is shown to developers in the Marketplace.
    * `PLAN-FILE` is the name of the plan in the `plans` subdirectory of the chart.
      
    (choose a CLI-friendly value: lowercase only, no special characters).

1. To add your `plans.yaml` to your chart , run the following command:

    ```
    cat > plans.yaml
    ```

1. To re-package your helm chart, run the following command:

    ```
    helm package YOUR-PRODUCT
    ```
    [WHAT IS YOUR PRODUCT EXACTLY?]
    

1. To add a dedicated instance service offering to Kubernetes Service Manager for PCF, run the following

    ```
    bazaar -t BAZAAR-API -u USERNAME -p PASSWORD offer save ./tmp/(YOUR-PRODUCT.tgz
    ```
    Where:
    + `BAZAAR-API` is
    + `USERNAME` is
    + `PASSWORD` is
  
  
    [IS BAZAAR-API DIFFERENT FROM PKS-API? SAME FOR USERNAME AND PASSWORD?]


[THE FOLLOWING IS NOT IN THIS PROCEDURE BUT DOES TELL YOU MORE STUFF YOU CAN DO WITH BAZZAR]
To list existing service offerings, run

```
bazaar -t (bazaar api) -u (username) -p (password) offer list ./tmp/(YOUR PRODUCT).tgz
```

To delete any service offerings, run

```
bazaar -t (bazaar api) -u (username) -p (password) offer delete ./tmp/(YOUR PRODUCT).tgz
```

###<a id='images'></a> Manage Container Images

For air-gapped environments that cannot reach out to common registries such as
[Docker Hub](https://hub.docker.com/) and
[Quay](https://quay.io/), or for images that aren't public, the `bazaar` CLI's `download` command 
gets the container images off of Pivotal Network. These images need to be loaded into a private registry. The `docker`
CLI [can add images](https://docs.docker.com/engine/reference/commandline/load/). The `bazaar` CLI does
include a command to cover this use case. 

1. To load an image into a private registry, run the following command:

    ```
    docker login -u USERNAME -p PASSWORD PRIVATE-REGISTRY-URL 
    ```

1. To push your Docker image, run the following command:

    ```
    bazaar image push -r PRIVATE-REGISTRY-URL  -d IMAGES-DIRECTORY
    ```

###<a id='requirements'></a> Other Chart Requirements

[SO DEFINING PLANS ARE REQUIREMENTS OR JUST WHAT DO WHEN YOU USE KSM?]
[WHERE/WHEN DO YOU DO THE STUFF HERE? IS THIS A CONFIGURING THING THAT YOU DO AFTER INSTALLING? ]

In addition to defining plans, there are some other items things to keep in mind:

* When defining a [`Service`](https://kubernetes.io/docs/concepts/services-networking/service/), only a subset of options work for the `type` value:
    - `LoadBalancer` is a current requirement
    - `NodePort` is also an option and Kibosh adds externalIPs and nodePort to bind json, but `NodePort` does carry
  significant risks. Pivotal recommends not using `NodePort` in production: is not robust to cluster scaling events, upgrades or other IP changes.
* In many cases, the `storageClass` for persistent volume claims needs to be customized to what's available for
  the IaaS on which PKS is running. The [PKS documentation](https://docs.pivotal.io/runtimes/pks/volumes.html)
  has additional details.
* Selectors are [immutable](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#selector)
    - This means that *chart name cannot change* (the name is generally used in selectors)
* Resizing disks has limitations. To support upgrade:
    - You can't resize a persistent volume claim (currently behind an [alpha feature gate](https://kubernetes.io/docs/reference/feature-gates/))


[SHOULD THIS BE A SEPERATE PAGE?]
##<a id='troubleshooting'></a> Troubleshooting
[STEM SENTENCE]
### <a id='issue-debugging'></a> Advanced Debugging
Advanced Debugging might require talking directly to the underlying Helm and Kubernetes:

* [Tiller](https://docs.helm.sh/glossary/#tiller) is the service side component of helm. Kubernetes Service Manager for PCF installs
Tiller into a specific namespace, `kibosh`. To manually run Helm commands, log in to the Kubernetes
cluster and include the namespace flag to talk the Kubernetes Service Manager for PCF's helm `--tiller-namespace=kibosh`.

<!-- TODO: mTLS credentials - need tile to test -->

####<a id='issue-name'></a> Name Length Issues
Often, early versions of some charts don't sufficiently sufficiently truncate names. Creating an instance
will fail immediately, with an error message including

* `must be no more than 63 characters`

The Helm chart needs to be enhanced with additional truncation and name protection. Visit
[the Helm documentation](https://docs.helm.sh/chart_template_guide/#adding-a-simple-template-call)
for some additional details on truncation and naming.

####<a id='issue-cleanup'></a> Cleanup
Pivotal Cloud Foundry gives an asynchronously provisioned service seven days to become healthy. It
sometimes requires manual cleanup to remove services earlier in some failure modes.
[Purging a service instance](https://docs.cloudfoundry.org/services/managing-service-brokers.html#purge-a-service-instance)
will remove the service from Pivotal Cloud Foundry. This might, however, leave resources in the backing cluster.

To fully clean up, delete the Helm release and the namespace, if either is still present.
Both the cluster and the Helm resources are named after the service's GUID.

```bash
helm delete namespace kibosh-GUID
kubectl delete namespace kibosh-GUID
```
